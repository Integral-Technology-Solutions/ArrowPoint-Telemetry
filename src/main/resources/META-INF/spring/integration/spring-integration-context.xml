<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-file="http://www.springframework.org/schema/integration/file"
	xmlns:int-ip="http://www.springframework.org/schema/integration/ip"
	xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
	xmlns:int-splunk="http://www.springframework.org/schema/integration/splunk"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/splunk http://www.springframework.org/schema/integration/splunk/spring-integration-splunk.xsd		
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
		http://www.springframework.org/schema/integration/ip http://www.springframework.org/schema/integration/ip/spring-integration-ip.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd">

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	  <property name="location">
	    <value>application.properties</value>
	  </property>
	</bean>

	<!--  Control Bus Configuration -->
	<int:channel id="controlChannel"/>
	<int:control-bus input-channel="controlChannel"/>	

	<int:logging-channel-adapter
		id="payloadLogger" level="INFO"
		expression="'Payload:' + payload + ', Headers:' + headers" />


	<int:channel id="csvOut" />
	<int:channel id="csvLineOut" />

	<int-file:inbound-channel-adapter
		id="csvIn" directory="${can.loader.directory}" filename-pattern="${can.loader.pattern}"
		prevent-duplicates="true">
		<int:poller id="poller" fixed-rate="${can.loader.poll.interval}" />
	</int-file:inbound-channel-adapter>

	<int-file:file-to-string-transformer
		input-channel="csvIn" output-channel="csvOut" delete-files="false"
		charset="UTF-8" />

	<int:splitter id="csvSplitter" input-channel="csvOut"
		output-channel="csvLineOut" ref="csvLineSplitter" />

	<int:service-activator id="canPacketBuilder"   
		input-channel="csvLineOut" output-channel="canPacketChannel"
		ref="canPacketBuilderService" />



	
	<!--If you wish to bind your UDP listener to an explict IP address then you need to uncomment this channel adapter
	and comment the one below.  Note you also need to make a change in the applicaiton.properties file
	-->
	
	<int-ip:udp-inbound-channel-adapter
		id="bridgeReceiver" channel="canbusBridgeChannel" port="${udp.port}"
		receive-buffer-size="1500" multicast="true" check-length="false"
		lookup-host="false" multicast-address="${udp.host}"
		local-address="${udp.local.address}" /> 
		
	<!--

	<int-ip:udp-inbound-channel-adapter
		id="bridgeReceiver" channel="canbusBridgeChannel" port="${udp.port}"
		receive-buffer-size="1500" multicast="true" check-length="false"
		lookup-host="false" multicast-address="${udp.host}" />

-->

	<int:channel id="canbusBridgeChannel" />

	<int:payload-deserializing-transformer
		id="udpPacketDeserializingTransformer"
		input-channel="canbusBridgeChannel"
		deserializer="udpPacketDeserializer" output-channel="udpPacketChannel" />




	<int:channel id="udpPacketChannel"
		datatype="com.prohelion.canbus.model.UdpPacket" />




	<int:splitter id="canPacketSplitRouter"
		input-channel="udpPacketChannel" output-channel="canPacketChannel"
		ref="canPacketSplitter" />




	<int:channel id="canPacketChannel"
		datatype="com.prohelion.canbus.model.CanPacket" />




	<int:splitter id="measurementDataSplitRouter"
		input-channel="canPacketChannel"
		output-channel="measurementDataChannel" ref="measurementDataSplitter" />



	<int:publish-subscribe-channel
		id="measurementAggregatedDataChannel"
		datatype="com.prohelion.model.MeasurementData"
		ignore-failures="true" />



	<int:recipient-list-router
		id="measurementDataRouter"
		input-channel="measurementAggregatedDataChannel">
		<int:recipient channel="filteredMeasurementDataChannel"
			selector-expression="payload.dataPointCanId le 1536 or payload.dataPointCanId ge 1551" /> <!-- no 0x40b with 1027 -->
		<int:recipient channel="nullChannel"
			selector-expression="payload.dataPointCanId ge 1537 and payload.dataPointCanId le 1550" />
	</int:recipient-list-router>


	<int:channel id="filteredMeasurementDataChannel"
		datatype="com.prohelion.model.MeasurementData" />



	<int:service-activator
		id="measurementDataServiceActivator"
		input-channel="filteredMeasurementDataChannel"
		output-channel="nullChannel" ref="measurementDataService" />

	<bean id="aggregatorBean"
		class="com.prohelion.service.impl.MeasurementDataAggregator" />
	<bean id="enricherBean"
		class="com.prohelion.service.impl.MeasurementDataEnrichment" />

	<bean id="mapGenerator"
		class="com.prohelion.maps.impl.MapGenerator">
		<property name="measurementDataEnrichment" ref="enricherBean" />
	</bean>

	<int:channel id="measurementDataChannel"
		datatype="com.prohelion.model.MeasurementData" />


	<int:channel id="measurementDataChannelEnriched"
		datatype="com.prohelion.model.MeasurementData" />


	<int:channel id="measurementDataChannelWithHeader"
		datatype="com.prohelion.model.MeasurementData" />



	<int:recipient-list-router
		id="measurementAggregatorRouter"
		input-channel="measurementDataChannelWithHeader">
		<int:recipient channel="dataForAgregation"
			selector-expression="payload.dataPointCanId ge 1024" /> <!-- Greater than 400 then aggregate -->
		<int:recipient
			channel="measurementAggregatedDataChannel"
			selector-expression="payload.dataPointCanId ge 768 and payload.dataPointCanId le 832" />  <!-- 300 to 340 range -->
	</int:recipient-list-router>


	<int:header-enricher id="headerEnrichment"
		output-channel="measurementDataChannelWithHeader"
		input-channel="measurementDataChannelEnriched">
		<int:correlation-id
			expression="payload.dataPointCanId" overwrite="true" />
	</int:header-enricher>

	<bean id="releaseStrategy"
		class="org.springframework.integration.aggregator.TimeoutCountSequenceSizeReleaseStrategy">
		<!-- Release when: 10 Messages ... or ... -->
		<constructor-arg index="0" value="10" />
		<!-- ... 1 second since first request -->
		<constructor-arg index="1" value="1000" />
	</bean>

	<int:aggregator id="messageDataAggregator"
		ref="aggregatorBean" method="collect"
		output-channel="measurementAggregatedDataChannel"
		release-strategy="releaseStrategy"
		expire-groups-upon-completion="true"
		send-partial-result-on-expiry="true" send-timeout="86420000"
		discard-channel="nullChannel" input-channel="dataForAgregation" />



	<!-- Poller for Weather data -->

	<bean id="javaSerializer"
		class="org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer" />
	<bean id="javaDeserializer"
		class="org.springframework.integration.ip.tcp.serializer.ByteArrayCrLfSerializer" />

	<int-ip:tcp-connection-factory
		id="weather-client" type="client" host="${weather.host}" port="${weather.port}"
		single-use="true" so-timeout="${weather.timeout}" deserializer="javaDeserializer"
		serializer="javaSerializer" />

	<int:channel id="weather-poll-command" />
	<int:channel id="weather-poll-replies" />

	<int-ip:tcp-outbound-channel-adapter
		id="outbound-weather-poller" channel="weather-poll-command" connection-factory="weather-client" auto-startup="${enable.weather.connector}" />

	<int:inbound-channel-adapter
		id="triggerWeatherE0" expression="'E0'" channel="weather-poll-command"
		auto-startup="${enable.weather.connector}">
		<int:poller fixed-delay="${weather.poll.interval}" />
	</int:inbound-channel-adapter>

	<int:inbound-channel-adapter
		id="triggerWeatherE4" expression="'E4'" channel="weather-poll-command"
		auto-startup="${enable.weather.connector}">
		<int:poller fixed-delay="${weather.poll.interval}" />
	</int:inbound-channel-adapter>

	<int-ip:tcp-inbound-channel-adapter
		id="inbound-weather-poll-replies" channel="weather-poll-replies" connection-factory="weather-client" auto-startup="${enable.weather.connector}"/>

	<int:splitter id="weatherSplitter" input-channel="weather-poll-replies"
		output-channel="udpPacketOutputChannel">
		<bean class="com.prohelion.environment.WeatherSplitter" />
	</int:splitter>

	<int:channel id="udpPacketOutputChannel"
		datatype="com.prohelion.canbus.model.UdpPacket" />


	<int:payload-serializing-transformer
		id="udpPacketSerializingTransformer"
		input-channel="udpPacketOutputChannel"
		serializer="udpPacketSerializer" output-channel="actualUdpOutput" />


	<int:channel id="actualUdpOutput" />

	<int-ip:udp-outbound-channel-adapter
		id="canbusSender" host="${udp.host}" port="${udp.port}" multicast="true"
		check-length="false" channel="actualUdpOutput" />


	<!-- GPS inbound -->

	<bean id="lfSeserializer"
		class="org.springframework.integration.ip.tcp.serializer.ByteArrayLfSerializer" />


	<int-ip:tcp-connection-factory
		id="GpsServer" type="server" host="${gps.host}" port="${gps.port}"
		deserializer="lfSeserializer" serializer="lfSeserializer" />

	<int-ip:tcp-inbound-gateway id="gatewayGps"
		connection-factory="GpsServer"
		request-channel="serverBytes2GpsSplitterChannel"
		error-channel="errorChannel"
		auto-startup="${enable.gps.connector}" />

	<int:channel id="serverBytes2GpsSplitterChannel" />

	<int:splitter id="gpsSplitter"
		input-channel="serverBytes2GpsSplitterChannel"
		output-channel="udpPacketOutputChannel">
		<bean class="com.prohelion.environment.GpsSplitter" />
	</int:splitter>

	<int:channel id="errorChannel" />
	<int:transformer id="errorHandler"
		input-channel="errorChannel"
		expression="payload.failedMessage.payload + ':' + payload.cause.message" />


	<int:transformer
		id="measurementDataToSplunkTransformer"
		input-channel="measurementAggregatedDataChannel"
		output-channel="splunkData"
		ref="measurementDataToSplunkTransformerBean" 
		auto-startup="${enable.splunk.connector}"/>

	<bean id="measurementDataToSplunkTransformerBean"
		class="com.prohelion.splunk.MeasurementDataToSplunkTransformer" />

	<int:channel id="splunkData" />

	<int:channel id="dataForAgregation" />

	<!-- Splunk Configuration -->

	<int-splunk:server id="splunkServer"
		host="${splunk.host}" port="${splunk.port}" username="${splunk.username}"
		password="${splunk.password}" owner="${splunk.owner}" scheme="${splunk.scheme}" />

	<int-splunk:outbound-channel-adapter
		id="splunkOutboundChannelAdapter" channel="splunkData"
		splunk-server-ref="splunkServer" auto-startup="${enable.splunk.connector}">
		<int-splunk:tcp-writer port="${splunk.tcpwriter.port}" />
	</int-splunk:outbound-channel-adapter>


	<int:splitter id="messageEnricher" ref="enricherBean"
		input-channel="measurementDataChannel"
		output-channel="measurementDataChannelEnriched" />

</beans>
